// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: beacon.proto

package beacon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BeaconServiceClient is the client API for BeaconService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeaconServiceClient interface {
	NamespaceLock(ctx context.Context, opts ...grpc.CallOption) (BeaconService_NamespaceLockClient, error)
	BuildLock(ctx context.Context, opts ...grpc.CallOption) (BeaconService_BuildLockClient, error)
	InitContainerLock(ctx context.Context, opts ...grpc.CallOption) (BeaconService_InitContainerLockClient, error)
	AcquireContainerLock(ctx context.Context, opts ...grpc.CallOption) (BeaconService_AcquireContainerLockClient, error)
}

type beaconServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeaconServiceClient(cc grpc.ClientConnInterface) BeaconServiceClient {
	return &beaconServiceClient{cc}
}

func (c *beaconServiceClient) NamespaceLock(ctx context.Context, opts ...grpc.CallOption) (BeaconService_NamespaceLockClient, error) {
	stream, err := c.cc.NewStream(ctx, &BeaconService_ServiceDesc.Streams[0], "/beacon.BeaconService/NamespaceLock", opts...)
	if err != nil {
		return nil, err
	}
	x := &beaconServiceNamespaceLockClient{stream}
	return x, nil
}

type BeaconService_NamespaceLockClient interface {
	Send(*LockRequest) error
	Recv() (*LockResponse, error)
	grpc.ClientStream
}

type beaconServiceNamespaceLockClient struct {
	grpc.ClientStream
}

func (x *beaconServiceNamespaceLockClient) Send(m *LockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *beaconServiceNamespaceLockClient) Recv() (*LockResponse, error) {
	m := new(LockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *beaconServiceClient) BuildLock(ctx context.Context, opts ...grpc.CallOption) (BeaconService_BuildLockClient, error) {
	stream, err := c.cc.NewStream(ctx, &BeaconService_ServiceDesc.Streams[1], "/beacon.BeaconService/BuildLock", opts...)
	if err != nil {
		return nil, err
	}
	x := &beaconServiceBuildLockClient{stream}
	return x, nil
}

type BeaconService_BuildLockClient interface {
	Send(*KeyedLockRequest) error
	Recv() (*LockResponse, error)
	grpc.ClientStream
}

type beaconServiceBuildLockClient struct {
	grpc.ClientStream
}

func (x *beaconServiceBuildLockClient) Send(m *KeyedLockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *beaconServiceBuildLockClient) Recv() (*LockResponse, error) {
	m := new(LockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *beaconServiceClient) InitContainerLock(ctx context.Context, opts ...grpc.CallOption) (BeaconService_InitContainerLockClient, error) {
	stream, err := c.cc.NewStream(ctx, &BeaconService_ServiceDesc.Streams[2], "/beacon.BeaconService/InitContainerLock", opts...)
	if err != nil {
		return nil, err
	}
	x := &beaconServiceInitContainerLockClient{stream}
	return x, nil
}

type BeaconService_InitContainerLockClient interface {
	Send(*KeyedLockRequest) error
	Recv() (*LockResponse, error)
	grpc.ClientStream
}

type beaconServiceInitContainerLockClient struct {
	grpc.ClientStream
}

func (x *beaconServiceInitContainerLockClient) Send(m *KeyedLockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *beaconServiceInitContainerLockClient) Recv() (*LockResponse, error) {
	m := new(LockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *beaconServiceClient) AcquireContainerLock(ctx context.Context, opts ...grpc.CallOption) (BeaconService_AcquireContainerLockClient, error) {
	stream, err := c.cc.NewStream(ctx, &BeaconService_ServiceDesc.Streams[3], "/beacon.BeaconService/AcquireContainerLock", opts...)
	if err != nil {
		return nil, err
	}
	x := &beaconServiceAcquireContainerLockClient{stream}
	return x, nil
}

type BeaconService_AcquireContainerLockClient interface {
	Send(*AcquireLockRequest) error
	Recv() (*LockResponse, error)
	grpc.ClientStream
}

type beaconServiceAcquireContainerLockClient struct {
	grpc.ClientStream
}

func (x *beaconServiceAcquireContainerLockClient) Send(m *AcquireLockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *beaconServiceAcquireContainerLockClient) Recv() (*LockResponse, error) {
	m := new(LockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BeaconServiceServer is the server API for BeaconService service.
// All implementations must embed UnimplementedBeaconServiceServer
// for forward compatibility
type BeaconServiceServer interface {
	NamespaceLock(BeaconService_NamespaceLockServer) error
	BuildLock(BeaconService_BuildLockServer) error
	InitContainerLock(BeaconService_InitContainerLockServer) error
	AcquireContainerLock(BeaconService_AcquireContainerLockServer) error
	mustEmbedUnimplementedBeaconServiceServer()
}

// UnimplementedBeaconServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBeaconServiceServer struct {
}

func (UnimplementedBeaconServiceServer) NamespaceLock(BeaconService_NamespaceLockServer) error {
	return status.Errorf(codes.Unimplemented, "method NamespaceLock not implemented")
}
func (UnimplementedBeaconServiceServer) BuildLock(BeaconService_BuildLockServer) error {
	return status.Errorf(codes.Unimplemented, "method BuildLock not implemented")
}
func (UnimplementedBeaconServiceServer) InitContainerLock(BeaconService_InitContainerLockServer) error {
	return status.Errorf(codes.Unimplemented, "method InitContainerLock not implemented")
}
func (UnimplementedBeaconServiceServer) AcquireContainerLock(BeaconService_AcquireContainerLockServer) error {
	return status.Errorf(codes.Unimplemented, "method AcquireContainerLock not implemented")
}
func (UnimplementedBeaconServiceServer) mustEmbedUnimplementedBeaconServiceServer() {}

// UnsafeBeaconServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeaconServiceServer will
// result in compilation errors.
type UnsafeBeaconServiceServer interface {
	mustEmbedUnimplementedBeaconServiceServer()
}

func RegisterBeaconServiceServer(s grpc.ServiceRegistrar, srv BeaconServiceServer) {
	s.RegisterService(&BeaconService_ServiceDesc, srv)
}

func _BeaconService_NamespaceLock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BeaconServiceServer).NamespaceLock(&beaconServiceNamespaceLockServer{stream})
}

type BeaconService_NamespaceLockServer interface {
	Send(*LockResponse) error
	Recv() (*LockRequest, error)
	grpc.ServerStream
}

type beaconServiceNamespaceLockServer struct {
	grpc.ServerStream
}

func (x *beaconServiceNamespaceLockServer) Send(m *LockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *beaconServiceNamespaceLockServer) Recv() (*LockRequest, error) {
	m := new(LockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BeaconService_BuildLock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BeaconServiceServer).BuildLock(&beaconServiceBuildLockServer{stream})
}

type BeaconService_BuildLockServer interface {
	Send(*LockResponse) error
	Recv() (*KeyedLockRequest, error)
	grpc.ServerStream
}

type beaconServiceBuildLockServer struct {
	grpc.ServerStream
}

func (x *beaconServiceBuildLockServer) Send(m *LockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *beaconServiceBuildLockServer) Recv() (*KeyedLockRequest, error) {
	m := new(KeyedLockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BeaconService_InitContainerLock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BeaconServiceServer).InitContainerLock(&beaconServiceInitContainerLockServer{stream})
}

type BeaconService_InitContainerLockServer interface {
	Send(*LockResponse) error
	Recv() (*KeyedLockRequest, error)
	grpc.ServerStream
}

type beaconServiceInitContainerLockServer struct {
	grpc.ServerStream
}

func (x *beaconServiceInitContainerLockServer) Send(m *LockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *beaconServiceInitContainerLockServer) Recv() (*KeyedLockRequest, error) {
	m := new(KeyedLockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BeaconService_AcquireContainerLock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BeaconServiceServer).AcquireContainerLock(&beaconServiceAcquireContainerLockServer{stream})
}

type BeaconService_AcquireContainerLockServer interface {
	Send(*LockResponse) error
	Recv() (*AcquireLockRequest, error)
	grpc.ServerStream
}

type beaconServiceAcquireContainerLockServer struct {
	grpc.ServerStream
}

func (x *beaconServiceAcquireContainerLockServer) Send(m *LockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *beaconServiceAcquireContainerLockServer) Recv() (*AcquireLockRequest, error) {
	m := new(AcquireLockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BeaconService_ServiceDesc is the grpc.ServiceDesc for BeaconService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeaconService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "beacon.BeaconService",
	HandlerType: (*BeaconServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NamespaceLock",
			Handler:       _BeaconService_NamespaceLock_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BuildLock",
			Handler:       _BeaconService_BuildLock_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "InitContainerLock",
			Handler:       _BeaconService_InitContainerLock_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AcquireContainerLock",
			Handler:       _BeaconService_AcquireContainerLock_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "beacon.proto",
}
