// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/daichitakahashi/confort"
	"github.com/docker/docker/api/types"
	"io"
	"sync"
)

// Ensure, that Fetcher does implement confort.Fetcher.
// If this is not the case, regenerate this file with moq.
var _ confort.Fetcher = &Fetcher{}

// Fetcher is a mock implementation of confort.Fetcher.
//
// 	func TestSomethingThatUsesFetcher(t *testing.T) {
//
// 		// make and configure a mocked confort.Fetcher
// 		mockedFetcher := &Fetcher{
// 			LogFunc: func(ctx context.Context) (io.ReadCloser, error) {
// 				panic("mock out the Log method")
// 			},
// 			PortsFunc: func() confort.Ports {
// 				panic("mock out the Ports method")
// 			},
// 			StatusFunc: func(ctx context.Context) (*types.ContainerState, error) {
// 				panic("mock out the Status method")
// 			},
// 		}
//
// 		// use mockedFetcher in code that requires confort.Fetcher
// 		// and then make assertions.
//
// 	}
type Fetcher struct {
	// LogFunc mocks the Log method.
	LogFunc func(ctx context.Context) (io.ReadCloser, error)

	// PortsFunc mocks the Ports method.
	PortsFunc func() confort.Ports

	// StatusFunc mocks the Status method.
	StatusFunc func(ctx context.Context) (*types.ContainerState, error)

	// calls tracks calls to the methods.
	calls struct {
		// Log holds details about calls to the Log method.
		Log []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Ports holds details about calls to the Ports method.
		Ports []struct {
		}
		// Status holds details about calls to the Status method.
		Status []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockLog    sync.RWMutex
	lockPorts  sync.RWMutex
	lockStatus sync.RWMutex
}

// Log calls LogFunc.
func (mock *Fetcher) Log(ctx context.Context) (io.ReadCloser, error) {
	if mock.LogFunc == nil {
		panic("Fetcher.LogFunc: method is nil but Fetcher.Log was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockLog.Lock()
	mock.calls.Log = append(mock.calls.Log, callInfo)
	mock.lockLog.Unlock()
	return mock.LogFunc(ctx)
}

// LogCalls gets all the calls that were made to Log.
// Check the length with:
//     len(mockedFetcher.LogCalls())
func (mock *Fetcher) LogCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockLog.RLock()
	calls = mock.calls.Log
	mock.lockLog.RUnlock()
	return calls
}

// Ports calls PortsFunc.
func (mock *Fetcher) Ports() confort.Ports {
	if mock.PortsFunc == nil {
		panic("Fetcher.PortsFunc: method is nil but Fetcher.Ports was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPorts.Lock()
	mock.calls.Ports = append(mock.calls.Ports, callInfo)
	mock.lockPorts.Unlock()
	return mock.PortsFunc()
}

// PortsCalls gets all the calls that were made to Ports.
// Check the length with:
//     len(mockedFetcher.PortsCalls())
func (mock *Fetcher) PortsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPorts.RLock()
	calls = mock.calls.Ports
	mock.lockPorts.RUnlock()
	return calls
}

// Status calls StatusFunc.
func (mock *Fetcher) Status(ctx context.Context) (*types.ContainerState, error) {
	if mock.StatusFunc == nil {
		panic("Fetcher.StatusFunc: method is nil but Fetcher.Status was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStatus.Lock()
	mock.calls.Status = append(mock.calls.Status, callInfo)
	mock.lockStatus.Unlock()
	return mock.StatusFunc(ctx)
}

// StatusCalls gets all the calls that were made to Status.
// Check the length with:
//     len(mockedFetcher.StatusCalls())
func (mock *Fetcher) StatusCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStatus.RLock()
	calls = mock.calls.Status
	mock.lockStatus.RUnlock()
	return calls
}
