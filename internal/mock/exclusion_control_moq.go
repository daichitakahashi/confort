// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/daichitakahashi/confort"
	"sync"
)

// Ensure, that ExclusionControl does implement confort.ExclusionControl.
// If this is not the case, regenerate this file with moq.
var _ confort.ExclusionControl = &ExclusionControl{}

// ExclusionControl is a mock implementation of confort.ExclusionControl.
//
// 	func TestSomethingThatUsesExclusionControl(t *testing.T) {
//
// 		// make and configure a mocked confort.ExclusionControl
// 		mockedExclusionControl := &ExclusionControl{
// 			AcquireContainerLockFunc: func(ctx context.Context, name string, exclusive bool) (func(), error) {
// 				panic("mock out the AcquireContainerLock method")
// 			},
// 			BuildLockFunc: func(ctx context.Context, image string) (func(), error) {
// 				panic("mock out the BuildLock method")
// 			},
// 			InitContainerLockFunc: func(ctx context.Context, name string) (func(), error) {
// 				panic("mock out the InitContainerLock method")
// 			},
// 			NamespaceLockFunc: func(ctx context.Context) (func(), error) {
// 				panic("mock out the NamespaceLock method")
// 			},
// 			TryAcquireContainerInitLockFunc: func(ctx context.Context, name string) (func() (func(), error), func(), bool, error) {
// 				panic("mock out the TryAcquireContainerInitLock method")
// 			},
// 		}
//
// 		// use mockedExclusionControl in code that requires confort.ExclusionControl
// 		// and then make assertions.
//
// 	}
type ExclusionControl struct {
	// AcquireContainerLockFunc mocks the AcquireContainerLock method.
	AcquireContainerLockFunc func(ctx context.Context, name string, exclusive bool) (func(), error)

	// BuildLockFunc mocks the BuildLock method.
	BuildLockFunc func(ctx context.Context, image string) (func(), error)

	// InitContainerLockFunc mocks the InitContainerLock method.
	InitContainerLockFunc func(ctx context.Context, name string) (func(), error)

	// NamespaceLockFunc mocks the NamespaceLock method.
	NamespaceLockFunc func(ctx context.Context) (func(), error)

	// TryAcquireContainerInitLockFunc mocks the TryAcquireContainerInitLock method.
	TryAcquireContainerInitLockFunc func(ctx context.Context, name string) (func() (func(), error), func(), bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// AcquireContainerLock holds details about calls to the AcquireContainerLock method.
		AcquireContainerLock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Exclusive is the exclusive argument value.
			Exclusive bool
		}
		// BuildLock holds details about calls to the BuildLock method.
		BuildLock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Image is the image argument value.
			Image string
		}
		// InitContainerLock holds details about calls to the InitContainerLock method.
		InitContainerLock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// NamespaceLock holds details about calls to the NamespaceLock method.
		NamespaceLock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// TryAcquireContainerInitLock holds details about calls to the TryAcquireContainerInitLock method.
		TryAcquireContainerInitLock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
	}
	lockAcquireContainerLock        sync.RWMutex
	lockBuildLock                   sync.RWMutex
	lockInitContainerLock           sync.RWMutex
	lockNamespaceLock               sync.RWMutex
	lockTryAcquireContainerInitLock sync.RWMutex
}

// AcquireContainerLock calls AcquireContainerLockFunc.
func (mock *ExclusionControl) AcquireContainerLock(ctx context.Context, name string, exclusive bool) (func(), error) {
	if mock.AcquireContainerLockFunc == nil {
		panic("ExclusionControl.AcquireContainerLockFunc: method is nil but ExclusionControl.AcquireContainerLock was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Exclusive bool
	}{
		Ctx:       ctx,
		Name:      name,
		Exclusive: exclusive,
	}
	mock.lockAcquireContainerLock.Lock()
	mock.calls.AcquireContainerLock = append(mock.calls.AcquireContainerLock, callInfo)
	mock.lockAcquireContainerLock.Unlock()
	return mock.AcquireContainerLockFunc(ctx, name, exclusive)
}

// AcquireContainerLockCalls gets all the calls that were made to AcquireContainerLock.
// Check the length with:
//     len(mockedExclusionControl.AcquireContainerLockCalls())
func (mock *ExclusionControl) AcquireContainerLockCalls() []struct {
	Ctx       context.Context
	Name      string
	Exclusive bool
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Exclusive bool
	}
	mock.lockAcquireContainerLock.RLock()
	calls = mock.calls.AcquireContainerLock
	mock.lockAcquireContainerLock.RUnlock()
	return calls
}

// BuildLock calls BuildLockFunc.
func (mock *ExclusionControl) BuildLock(ctx context.Context, image string) (func(), error) {
	if mock.BuildLockFunc == nil {
		panic("ExclusionControl.BuildLockFunc: method is nil but ExclusionControl.BuildLock was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Image string
	}{
		Ctx:   ctx,
		Image: image,
	}
	mock.lockBuildLock.Lock()
	mock.calls.BuildLock = append(mock.calls.BuildLock, callInfo)
	mock.lockBuildLock.Unlock()
	return mock.BuildLockFunc(ctx, image)
}

// BuildLockCalls gets all the calls that were made to BuildLock.
// Check the length with:
//     len(mockedExclusionControl.BuildLockCalls())
func (mock *ExclusionControl) BuildLockCalls() []struct {
	Ctx   context.Context
	Image string
} {
	var calls []struct {
		Ctx   context.Context
		Image string
	}
	mock.lockBuildLock.RLock()
	calls = mock.calls.BuildLock
	mock.lockBuildLock.RUnlock()
	return calls
}

// InitContainerLock calls InitContainerLockFunc.
func (mock *ExclusionControl) InitContainerLock(ctx context.Context, name string) (func(), error) {
	if mock.InitContainerLockFunc == nil {
		panic("ExclusionControl.InitContainerLockFunc: method is nil but ExclusionControl.InitContainerLock was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockInitContainerLock.Lock()
	mock.calls.InitContainerLock = append(mock.calls.InitContainerLock, callInfo)
	mock.lockInitContainerLock.Unlock()
	return mock.InitContainerLockFunc(ctx, name)
}

// InitContainerLockCalls gets all the calls that were made to InitContainerLock.
// Check the length with:
//     len(mockedExclusionControl.InitContainerLockCalls())
func (mock *ExclusionControl) InitContainerLockCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockInitContainerLock.RLock()
	calls = mock.calls.InitContainerLock
	mock.lockInitContainerLock.RUnlock()
	return calls
}

// NamespaceLock calls NamespaceLockFunc.
func (mock *ExclusionControl) NamespaceLock(ctx context.Context) (func(), error) {
	if mock.NamespaceLockFunc == nil {
		panic("ExclusionControl.NamespaceLockFunc: method is nil but ExclusionControl.NamespaceLock was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockNamespaceLock.Lock()
	mock.calls.NamespaceLock = append(mock.calls.NamespaceLock, callInfo)
	mock.lockNamespaceLock.Unlock()
	return mock.NamespaceLockFunc(ctx)
}

// NamespaceLockCalls gets all the calls that were made to NamespaceLock.
// Check the length with:
//     len(mockedExclusionControl.NamespaceLockCalls())
func (mock *ExclusionControl) NamespaceLockCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockNamespaceLock.RLock()
	calls = mock.calls.NamespaceLock
	mock.lockNamespaceLock.RUnlock()
	return calls
}

// TryAcquireContainerInitLock calls TryAcquireContainerInitLockFunc.
func (mock *ExclusionControl) TryAcquireContainerInitLock(ctx context.Context, name string) (func() (func(), error), func(), bool, error) {
	if mock.TryAcquireContainerInitLockFunc == nil {
		panic("ExclusionControl.TryAcquireContainerInitLockFunc: method is nil but ExclusionControl.TryAcquireContainerInitLock was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockTryAcquireContainerInitLock.Lock()
	mock.calls.TryAcquireContainerInitLock = append(mock.calls.TryAcquireContainerInitLock, callInfo)
	mock.lockTryAcquireContainerInitLock.Unlock()
	return mock.TryAcquireContainerInitLockFunc(ctx, name)
}

// TryAcquireContainerInitLockCalls gets all the calls that were made to TryAcquireContainerInitLock.
// Check the length with:
//     len(mockedExclusionControl.TryAcquireContainerInitLockCalls())
func (mock *ExclusionControl) TryAcquireContainerInitLockCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockTryAcquireContainerInitLock.RLock()
	calls = mock.calls.TryAcquireContainerInitLock
	mock.lockTryAcquireContainerInitLock.RUnlock()
	return calls
}
