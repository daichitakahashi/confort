syntax = "proto3";

option go_package = "internal/beacon/proto";

import "google/protobuf/empty.proto";

package proto;

service BeaconService {
  rpc LockForNamespace(stream LockRequest)
      returns (stream LockResponse);

  rpc LockForBuild(stream KeyedLockRequest)
      returns (stream LockResponse);

  rpc LockForContainerSetup(stream KeyedLockRequest)
      returns (stream LockResponse);

  rpc AcquireContainerLock(stream AcquireLockRequest)
      returns (stream AcquireLockResponse);

  rpc Interrupt(google.protobuf.Empty)
      returns (google.protobuf.Empty);
}

enum LockOp {
  LOCK_OP_LOCK = 0;
  LOCK_OP_UNLOCK = 1;
}

enum AcquireOp {
  ACQUIRE_OP_LOCK = 0;
  ACQUIRE_OP_INIT_LOCK = 1;
  ACQUIRE_OP_SHARED_LOCK = 2;
  ACQUIRE_OP_INIT_SHARED_LOCK = 3;
  ACQUIRE_OP_UNLOCK = 4;
  ACQUIRE_OP_SET_INIT_DONE = 5 [deprecated = true];
  ACQUIRE_OP_SET_INIT_FAILED = 6 [deprecated = true];
}

enum LockState {
  LOCK_STATE_LOCKED = 0;
  LOCK_STATE_SHARED_LOCKED = 1;
  LOCK_STATE_UNLOCKED = 2;
}

message LockRequest {
  LockOp operation = 1;
}

message LockResponse {
  LockState state = 1;
}

message KeyedLockRequest {
  string key = 1;
  LockOp operation = 2;
}

message AcquireLockParam {
  AcquireOp operation = 1;
}

message AcquireLockAcquireParam {
  map<string, AcquireLockParam> targets = 1;
}

message AcquireLockInitParam {
  string key = 1;
  bool initSucceeded = 2;
}

message AcquireLockRequest {
  reserved 1, 2;
  oneof param {
    AcquireLockAcquireParam acquire = 3;
    AcquireLockInitParam init = 4;
    google.protobuf.Empty release = 5;
  }
}

message AcquireLockResult {
  LockState state = 1;
  bool acquireInit = 2;
}

message AcquireLockResponse {
  reserved 1, 2;
  map<string, AcquireLockResult> results = 3;
}
