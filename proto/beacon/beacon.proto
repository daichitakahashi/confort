syntax = "proto3";

option go_package = "proto/beacon";

import "google/protobuf/empty.proto";

package beacon;

service BeaconService {
  rpc Register(RegisterRequest)
      returns (RegisterResponse);

  rpc Deregister(DeregisterRequest)
      returns (google.protobuf.Empty);

  rpc BuildImage(BuildImageRequest)
      returns (stream BuildImageResponse);

  rpc CreateContainer(CreateContainerRequest)
      returns (stream CreateContainerResponse);

  rpc AcquireContainerEndpoint(AcquireContainerEndpointRequest)
      returns (stream AcquireContainerEndpointResponse);

  rpc ReleaseContainer(ReleaseContainerRequest)
      returns (google.protobuf.Empty);
}

enum ResourcePolicy {
  ERROR = 0;
  REUSE = 1;
  TAKE_OVER = 2;
}

message RegisterRequest {
  string namespace = 1;
  ResourcePolicy resource_policy = 2;
}

message RegisterResponse {
  string client_id = 1;
  bytes network_resource = 2;
}

message DeregisterRequest {
  string namespace = 1;
}

message BuildImageRequest {
  string context_dir = 1;
  bytes build_options = 2;
  bool force = 3;
}

message Message {
  string message = 1;
}

message BuiltImage {
  string image_tag = 1;
}

message BuildImageResponse {
  oneof processing {
    Message building = 1;
    BuiltImage built = 2;
  }
}

message CreateContainerRequest {
  string name = 1;
  bytes container_config = 2;
  bytes host_config = 3;
  bytes networking_config = 4;
  bool check_config_consistency = 5;
  optional bytes pull_config = 6;
}

message CreatedContainer {
  string container_id = 1;
}

message CreateContainerResponse {
  oneof processing {
    Message pulling = 1;
    CreatedContainer created = 2;
  }
}

message AcquireContainerEndpointRequest {
  string container_name = 1;
  bool exclusive = 2;
}

message PortBinding {
  string host_ip = 1;
  string host_port = 2;
}

message Endpoints {
  repeated PortBinding bindings = 1;
}

message AcquireContainerEndpointResponse {
  map<string, Endpoints> endpoints = 1;
}

message ReleaseContainerRequest {
  string container_name = 1;
}
