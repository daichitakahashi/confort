// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/daichitakahashi/confort/wait"
	"github.com/docker/docker/api/types"
	"github.com/docker/go-connections/nat"
	"io"
	"sync"
)

// Ensure, that Fetcher does implement wait.Fetcher.
// If this is not the case, regenerate this file with moq.
var _ wait.Fetcher = &Fetcher{}

// Fetcher is a mock implementation of wait.Fetcher.
//
//	func TestSomethingThatUsesFetcher(t *testing.T) {
//
//		// make and configure a mocked wait.Fetcher
//		mockedFetcher := &Fetcher{
//			ContainerIDFunc: func() string {
//				panic("mock out the ContainerID method")
//			},
//			ExecFunc: func(ctx context.Context, cmd ...string) ([]byte, error) {
//				panic("mock out the Exec method")
//			},
//			LogFunc: func(ctx context.Context) (io.ReadCloser, error) {
//				panic("mock out the Log method")
//			},
//			PortsFunc: func() nat.PortMap {
//				panic("mock out the Ports method")
//			},
//			StatusFunc: func(ctx context.Context) (*types.ContainerState, error) {
//				panic("mock out the Status method")
//			},
//		}
//
//		// use mockedFetcher in code that requires wait.Fetcher
//		// and then make assertions.
//
//	}
type Fetcher struct {
	// ContainerIDFunc mocks the ContainerID method.
	ContainerIDFunc func() string

	// ExecFunc mocks the Exec method.
	ExecFunc func(ctx context.Context, cmd ...string) ([]byte, error)

	// LogFunc mocks the Log method.
	LogFunc func(ctx context.Context) (io.ReadCloser, error)

	// PortsFunc mocks the Ports method.
	PortsFunc func() nat.PortMap

	// StatusFunc mocks the Status method.
	StatusFunc func(ctx context.Context) (*types.ContainerState, error)

	// calls tracks calls to the methods.
	calls struct {
		// ContainerID holds details about calls to the ContainerID method.
		ContainerID []struct {
		}
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cmd is the cmd argument value.
			Cmd []string
		}
		// Log holds details about calls to the Log method.
		Log []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Ports holds details about calls to the Ports method.
		Ports []struct {
		}
		// Status holds details about calls to the Status method.
		Status []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockContainerID sync.RWMutex
	lockExec        sync.RWMutex
	lockLog         sync.RWMutex
	lockPorts       sync.RWMutex
	lockStatus      sync.RWMutex
}

// ContainerID calls ContainerIDFunc.
func (mock *Fetcher) ContainerID() string {
	if mock.ContainerIDFunc == nil {
		panic("Fetcher.ContainerIDFunc: method is nil but Fetcher.ContainerID was just called")
	}
	callInfo := struct {
	}{}
	mock.lockContainerID.Lock()
	mock.calls.ContainerID = append(mock.calls.ContainerID, callInfo)
	mock.lockContainerID.Unlock()
	return mock.ContainerIDFunc()
}

// ContainerIDCalls gets all the calls that were made to ContainerID.
// Check the length with:
//
//	len(mockedFetcher.ContainerIDCalls())
func (mock *Fetcher) ContainerIDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockContainerID.RLock()
	calls = mock.calls.ContainerID
	mock.lockContainerID.RUnlock()
	return calls
}

// Exec calls ExecFunc.
func (mock *Fetcher) Exec(ctx context.Context, cmd ...string) ([]byte, error) {
	if mock.ExecFunc == nil {
		panic("Fetcher.ExecFunc: method is nil but Fetcher.Exec was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cmd []string
	}{
		Ctx: ctx,
		Cmd: cmd,
	}
	mock.lockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	mock.lockExec.Unlock()
	return mock.ExecFunc(ctx, cmd...)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//
//	len(mockedFetcher.ExecCalls())
func (mock *Fetcher) ExecCalls() []struct {
	Ctx context.Context
	Cmd []string
} {
	var calls []struct {
		Ctx context.Context
		Cmd []string
	}
	mock.lockExec.RLock()
	calls = mock.calls.Exec
	mock.lockExec.RUnlock()
	return calls
}

// Log calls LogFunc.
func (mock *Fetcher) Log(ctx context.Context) (io.ReadCloser, error) {
	if mock.LogFunc == nil {
		panic("Fetcher.LogFunc: method is nil but Fetcher.Log was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockLog.Lock()
	mock.calls.Log = append(mock.calls.Log, callInfo)
	mock.lockLog.Unlock()
	return mock.LogFunc(ctx)
}

// LogCalls gets all the calls that were made to Log.
// Check the length with:
//
//	len(mockedFetcher.LogCalls())
func (mock *Fetcher) LogCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockLog.RLock()
	calls = mock.calls.Log
	mock.lockLog.RUnlock()
	return calls
}

// Ports calls PortsFunc.
func (mock *Fetcher) Ports() nat.PortMap {
	if mock.PortsFunc == nil {
		panic("Fetcher.PortsFunc: method is nil but Fetcher.Ports was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPorts.Lock()
	mock.calls.Ports = append(mock.calls.Ports, callInfo)
	mock.lockPorts.Unlock()
	return mock.PortsFunc()
}

// PortsCalls gets all the calls that were made to Ports.
// Check the length with:
//
//	len(mockedFetcher.PortsCalls())
func (mock *Fetcher) PortsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPorts.RLock()
	calls = mock.calls.Ports
	mock.lockPorts.RUnlock()
	return calls
}

// Status calls StatusFunc.
func (mock *Fetcher) Status(ctx context.Context) (*types.ContainerState, error) {
	if mock.StatusFunc == nil {
		panic("Fetcher.StatusFunc: method is nil but Fetcher.Status was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStatus.Lock()
	mock.calls.Status = append(mock.calls.Status, callInfo)
	mock.lockStatus.Unlock()
	return mock.StatusFunc(ctx)
}

// StatusCalls gets all the calls that were made to Status.
// Check the length with:
//
//	len(mockedFetcher.StatusCalls())
func (mock *Fetcher) StatusCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStatus.RLock()
	calls = mock.calls.Status
	mock.lockStatus.RUnlock()
	return calls
}
