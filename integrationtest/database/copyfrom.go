// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: copyfrom.go

package database

import (
	"context"
)

// iteratorForCreateEmployees implements pgx.CopyFromSource.
type iteratorForCreateEmployees struct {
	rows                 []CreateEmployeesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateEmployees) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateEmployees) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Name,
		r.rows[0].TenantID,
	}, nil
}

func (r iteratorForCreateEmployees) Err() error {
	return nil
}

func (q *Queries) CreateEmployees(ctx context.Context, arg []CreateEmployeesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"employees"}, []string{"name", "tenant_id"}, &iteratorForCreateEmployees{rows: arg})
}

// iteratorForCreateTenants implements pgx.CopyFromSource.
type iteratorForCreateTenants struct {
	rows                 []string
	skippedFirstNextCall bool
}

func (r *iteratorForCreateTenants) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateTenants) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0],
	}, nil
}

func (r iteratorForCreateTenants) Err() error {
	return nil
}

func (q *Queries) CreateTenants(ctx context.Context, name []string) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"tenants"}, []string{"name"}, &iteratorForCreateTenants{rows: name})
}
